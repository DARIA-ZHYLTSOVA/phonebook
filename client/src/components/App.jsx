import React from "react";
import AddContact from "./addContact";
import { fetchContacts } from "../requests/fetchContacts";
import { updateStatus } from "../requests/updateStatus";
import { ContactTable } from "./contactTable";
// –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class App extends React.Component {
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  state = {
    contacts: [],
    search: "",
    idUser: "",
  };
  // –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  getContacts = async (_idUser) => {
    const allContacts = await fetchContacts();
    const contacts = allContacts.filter(({idUser}) => idUser === _idUser);
    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.setState({ contacts: contacts, idUser: _idUser });
  };
  // –º–µ—Ç–æ–¥ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  async componentDidMount() {
    const tmp = this.props.location.search;
    this.setState({idUser: tmp.substring(7)})
    this.getContacts(this.props.location.search.substring(7));
  }
  // –∞—Å–∏–Ω—Ö—Ä —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
  remove = async (id) => {
    const response = await fetch(`http://localhost:4000/${id}`, {
      method: "DELETE",
    });
    const contacts = await response.json();
    this.getContacts(this.props.location.search.substring(7))
  };
  // —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –Ω–µ–≥–æ
  addOrCancelStatus = async (id) => {
    const { isFavourite } = this.state.contacts.find(({ _id }) => _id === id);
    const contacts = await updateStatus(id, isFavourite);
    this.getContacts(this.props.location.search.substring(7))
  };
  searchChange = (event) => {
    this.setState({ search: event.target.value });
  };
  // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  searchContacts = () =>{
    let contactSearched = [];
    if(this.state.search){
      contactSearched = this.state.contacts.filter((contact) => {
        if(contact.name.includes(this.state.search) === true){
          return contact;
        }
        else{
          return "";
        }
      })
    }
    return contactSearched;
  }
  removeUser = async () =>{
    if(window.confirm("Are you sure?")){   
      const response = await fetch(`http://localhost:4001/${this.state.idUser}`, {
        method: "DELETE",
      });
      const users = await response.json();
      this.props.history.push({
        pathname: '/',
        search: `?query=${this.state.idUser}`,
        // state: { detail: response.data }
      })
    }
  }
  // –º–µ—Ç–æ–¥ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–æ, —á—Ç–æ –≤ –Ω–µ–º
  render() {
    // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
    const { contacts, search, idUser } = this.state;
    // —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏ –Ω–µ—Ç
    const contactsFavourite = contacts.filter(({ isFavourite }) => isFavourite);
    const contactsJust = contacts.filter(({ isFavourite }) => !isFavourite);
    const contactSearched = this.searchContacts();
    // —Ä–∞–∑–º–µ—Ç–∫–∞
    return (
      <div className="main">
        <br />
        <div className="form">
          <div className="title">
            <h3>üì± Phonebook </h3>
            <button className="btn btn-outline-danger" onClick={()=>this.removeUser()}>üóë</button>
          </div>
          <br />
          <h4>Create contact</h4>
          
          {/* –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */}
          <AddContact getContacts={this.getContacts} idUser ={idUser} />
        </div>
        <br />
        <div className="label-input">
        <label htmlFor="phone-search">Find Contact</label>
          <input
            id="phone-search"
            className="form-control"
            value={search}
            onChange={this.searchChange}
          ></input>
        </div>
        {/* –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ */}
        {(contactSearched.length !== 0) && (
          <div className="lists">
            <ContactTable
              header={<h4>Found ({contactSearched.length})</h4>}
              contacts={contactSearched}
              addOrCancelStatus={this.addOrCancelStatus}
              remove={this.remove}
              idUser ={idUser}
            />
            <br />
          </div>
        )}
        {/* –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–ø—Å–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        
        {(contactsFavourite.length !== 0 && contactSearched.length === 0 && search.length === 0) && (
          <div className="lists">
            <ContactTable
              header={<h4> Favourite ({contactsFavourite.length})</h4>}
              contacts={contactsFavourite}
              addOrCancelStatus={this.addOrCancelStatus}
              remove={this.remove}
              idUser ={idUser}
            />
            <br />
          </div>
        )}
        {/* –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–ø—Å–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        {(contactsJust.length !== 0 && contactSearched.length === 0  && search.length === 0) && (
          <div className="lists">
            <ContactTable
              header={<h4>Contacts ({contactsJust.length})</h4>}
              contacts={contactsJust}
              addOrCancelStatus={this.addOrCancelStatus}
              remove={this.remove}
              idUser ={idUser}
            />
            <br />
          </div>
        )}
      </div>
    );
  }
}
// —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–µ
export default App;
